from lib:storage_helpers import loop
from server:core import server_load

from ./models import GAME_META, Map
from ./events import on_start_game


append function server_load:
    if not GAME_META.map_queue:
        GAME_META.map_queue = []
        function game:map_queue/shuffle
    
    if not GAME_META.running:
        GAME_META.running = False


function game:map/queue/next:
    # if the queue is empty, shuffle it
    if not GAME_META.map_queue:
        function game:map_queue/shuffle

    # otherwise, set the current map to the next in the queue and remove it from the queue
    GAME_META.current.map = Map.get(GAME_META.map_queue[-1])
    GAME_META.map_queue[-1].remove()


function game:map/queue/shuffle:
    # copy all maps into temp storage
    STORAGE.temp.maps = GAME_META.all_maps[:].id
    while loop(STORAGE.temp.maps):
        # for each iteration, pick a random index from the remaining maps (0..len-1)
        STORAGE.macro.len = len(STORAGE.temp.maps[:]) - 1  # 0..$(len) is inclusive..inclusive in minecraft
        with var STORAGE.macro:
            $execute store result storage shulker:macro index int 1 run random value 0..$(len)
        
        # append that map to the queue and remove it from temp storage
        with var STORAGE.macro:
            $data modify storage game:meta map_queue append from storage shulker:temp maps[{$(index)}]
            $data remove storage shulker:temp maps[$(index)]


append function on_game_start:
    

    for map in Map._all_maps:
        if GAME_META.current.map.id == map.id:
            function map.on_game_start
