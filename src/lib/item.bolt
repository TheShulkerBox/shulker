# stub bolt file -- reimport from python

from src.lib.item import ItemMeta

@defer
def generate_give_commands():
    for name, custom_item in ItemMeta.registered_items.items():
        if custom_item.has_id:
            function f"item:give/{name}":
                give @s custom_item


class item(metaclass=ItemMeta):
    """item is the base class for all items in the data pack. This is a special behaving structure that
    barely resembles a class leveraging metaclasses.

    The basic structure is to define all components as "class variables" and then use custom methods
    to define special behavior to simplify component construction. This allows you to abstract
    complex behavior as isolated "custom components" or "component transformers" that can be reused
    across multiple items.
    
    ```py
    class basic_item(item):
        id = "minecraft:stone"
        item_name = {text: "Basic Item", color: theme.primary}
        lore = ["This is a basic item.", "It does nothing special."]
    ```
    This item just uses vanilla components to define a stone item with a custom name and lore.

    ```py
    class custom_item(item):
        id = "minecraft:custom_item"
        item_name = {text: "Custom Item", color: theme.primary}
        lore = ["This is a custom item.", "It has special behavior."]
        test_component = false
        
        def test_component(val: bool):
            return {"enchantment_glint_override": val}
    ```
    Here, we define a basic `test_component` that converts a `bool` into a new set of vanilla components.

    ```py
    class custom_item_2(item):
        id = "minecraft:custom_item_2"
        item_name = {text: "Custom Item 2", color: theme.primary}
        lore = ["This is another custom item.", "It has special behavior."]
        dyed_color = "#ff0000"
    ```
    This item uses a `dyed_color` transformer that is automatically transformed into a color integer. Note, the
    implementation for this transformer is defined in the `item` class itself, so you can use it in any item.
    
    Custom components are functions that **must** end with "_component" and define a new component that gets converted
    into one or more components. This is useful for defining a simple interface for coordinating multiple components.
    Custom components can even define their own functions and other resource files in order to achieve it's purpose.

    Component transformers on the other hand are functions that **must** end with "_transformer" and are used to transform
    an existing component's value into a new value. If the transformer returns `None`, no action is taken. This is useful
    when providing multiple input types for a component, such as a color that can be either a string or an integer.
    """

    def dyed_color_transformer(color: str | Any):
        if type(color) is str:
            return int(color.removeprefix("#"), 16)

    def lore_transformer(lore: str | list[str]):
        if type(lore) is str:
            lore = [lore]
        
        transformed = []
        for line in lore:
            if type(line) is str:
                transformed.append({text: line, color: theme.secondary, italic: false})
            else:
                transformed.append(line)
        
        return transformed    


class armor_item(item):
    """Makes armor unequipable while providing helper attribute components"""

    tooltip_display = {hidden_components: ["minecraft:enchantments"]}
    enchantments = {binding_curse: 1}
    enchantment_glint_override = false

    def armor_component(
        slot: str,
        value: float | None = None,
        toughness: float | None = None,
        knockback_resistance: float | None = None,
        speed: float | None = None
    ):
        modifiers = []

        if value is not None:
            modifiers.append({
                "type": "armor",
                "slot": slot,
                "id": "armor." + slot,
                "amount": value,
                "operation": "add_value",
            })

        if toughness is not None:
            modifiers.append({
                "type": "armor_toughness",
                "slot": slot,
                "id": "armor." + slot,
                "amount": toughness,
                "operation": "add_value",
            })

        if knockback_resistance is not None:
            modifiers.append({
                "type": "knockback_resistance",
                "slot": slot,
                "id": "armor." + slot,
                "amount": knockback_resistance,
                "operation": "add_value",
            })

        if speed is not None:
            modifiers.append({
                "type": "movement_speed",
                "slot": slot,
                "id": "armor." + slot,
                "amount": speed,
                "operation": "add_value",
            })

        if modifiers:
            return {"attribute_modifiers": modifiers}


class weapon_item(item):
    """Provides weapon customization components"""

    def weapon_component(
        damage: float | None = None,
        speed: float | None = None,
        knockback: float | None = None,
        # **other_components,
        # crit: float | None,
    ):
        modifiers = []

        if damage is not None:
            modifiers.append({
                "type": "attack_damage",
                "slot": "mainhand",
                "id": "weapon",
                "amount": damage,
                "operation": "add_value",
            })

        if speed is not None:
            modifiers.append({
                "type": "attack_speed",
                "slot": "mainhand",
                "id": "weapon",
                "amount": speed,
                "operation": "add_value",
            })
            modifiers.append({
                "type": "attack_speed",
                "slot": "offhand",
                "id": "weapon",
                "amount": speed,
                "operation": "add_value",
            })

        if knockback is not None:
            modifiers.append({
                "type": "attack_knockback",
                "slot": "mainhand",
                "id": "weapon",
                "amount": knockback,
                "operation": "add_value",
            })
            modifiers.append({
                "type": "attack_knockback",
                "slot": "offhand",
                "id": "weapon",
                "amount": knockback,
                "operation": "add_value",
            })

        if modifiers:
            return {"attribute_modifiers": modifiers}
