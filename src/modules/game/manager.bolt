from contextlib import contextmanager
from dataclasses import dataclass
from enum import StrEnum
from typing import Iterator, Literal, ClassVar

from src.lib.helpers import branch

from lib:storage_helpers import loop_with_index, loop_while

TEAM_COLORS = [
    "dark_aqua",  "dark_blue",    "red",    "black",
    "dark_red",   "dark_purple",  "gold",   "gray",
    "dark_green", "light_purple", "yellow", "white",
    "dark_gray",  "blue",         "green",  "aqua",
]

#: stores meta data about games and maps
GAME_META = Data.storage("game:meta")


@dataclass
class Team:
    id: str
    color: str
    spawn: tuple[int, int, int, int, int]  # coords, yaw, pitch
    
    def __post_init__(self):
        if self.color not in TEAM_COLORS:
            raise ValueError(f"`color` needs to be one of: {TEAM_COLORS}")  # for now :(

    @property
    def name(self) -> str:
        return self.id.replace("_", " ").title()


@dataclass
class Map:
    _all_maps: ClassVar[list["Map"]] = []

    id: str
    teams: list[Team]

    # eventually, all maps will be 0 0 0 in their own dimension
    location: tuple[int, int, int]
    dimension: str = "overworld"

    def __post_init__(self):
        """Register the map in the global list of maps to be processed later."""
        
        self._all_maps.append(self)

    @property
    def name(self) -> str:
        return self.id.replace("_", " ").title()

    @property
    def init(self) -> str:
        """Called when the map is initialized."""

        return f"game:map/{self.id}/init"
    
    @property
    def tick(self) -> str:
        """Called every tick for the map."""

        return f"game:map/{self.id}/tick"

    @branch
    def is_selected(self) -> Iterator[Literal[True]]:
        """Implements `if` statement behavior for checking if this map is the current map.

        ```bolt
        if MyMap.is_selected():
            say "this only occurs if my map is selected"
        ```
        """

        if GAME_META.current.map.id == self.id:
            yield True

# - shuffle function to randomize map queue
# - next button to go to next map in queue
#   - if queue empty, shuffle
# - map voting system

append function sys:load:
    if not GAME_META.map_queue:
        GAME_META.map_queue = []


function game:map_queue/next:
    if not GAME_META.map_queue:
        return run function game:map_queue/shuffle
    
    GAME_META.current.map = GAME_META.map_queue[-1]
    GAME_META.map_queue[-1].remove()


function game:map_queue/shuffle:
    TEMP_STORAGE.maps = GAME_META.all_maps
    while loop_while(TEMP_STORAGE.maps):
