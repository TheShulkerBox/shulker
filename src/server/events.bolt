from server:core import server_tick, server_load, SERVER_GLOBALS
from lib:utils import get_player_name
from lib:text import small_caps


#> Events
on_first_join = ~/on_first_join
on_join = ~/on_join
on_playerdb_init = ~/on_playerdb_init 
# on_player_count = 


# Iff score is :
#  <not set> -> player has not joined (server crashed / on reload)
#  0 -> player has joined / is online
#  1 -> player has not joined (player has left game)
on_join_score = Scoreboard("player.on_join", criteria="minecraft.custom:minecraft.leave_game")
time_played = Scoreboard("stats.time_played", criteria="minecraft.custom:minecraft.play_time")


append function server_tick:
    # First join based on time played scoreboard
    as @a[scores={time_played=..1}] at @s function on_first_join

    # Detect player joining on two conditions:
    # 
    # 1. If `on_join` score increments, that means they left the game
    # 2. If `on_join` score doesn't exist, that means we've reloaded (occurs on server crash too!)
    as @a unless score var on_join_score["@s"] = var on_join_score["@s"]:
        on_join_score["@s"] += 1
    
    # On new joins..
    as @a[scores={on_join_score=1..}] at @s function on_join


append function server_load:
    # We reset all scores and set online players to 0 on load
    on_join_score["*"].reset()
    on_join_score["@a"] = 0


function on_first_join:
    """
    This detects first join based on the `time_played` stat scoreboard. We use a scoreboard
    instead of an advancement because it's easier to reset when testing `on_first_join` logic.
    """

    playsound minecraft:ui.toast.challenge_complete master @s ~ ~ ~ 0.7 0.8 0.7


function on_join:
    """Called when a player joins (even if the server had crashed).

    as/at @s: player
    """

    on_join_score["@s"] = 0

    execute function ~/welcome_message:
        title @s title {text: small_caps("Welcome back"), color: theme.primary}
        title @s subtitle {text: small_caps("The Shulker Box"), color: theme.secondary, bold: true}

        as @a[tag=staff] at @s playsound minecraft:entity.experience_orb.pickup master @s ~ ~ ~ 2 1.5
        playsound block.end_portal_frame.fill master @s 0 65 0 2 0.5 1



player_count = SERVER_GLOBALS["player_count"]
last_player_count = SERVER_GLOBALS["last_player_count"]

append function server_tick:
    # detect player cnt
    store result score var player_count if entity @a
    if player_count < last_player_count:
        as @a[tag=staff] at @s playsound minecraft:block.note_block.bass master @s ~ ~ ~ 0.5 0.42

    last_player_count = player_count
