from dataclasses import dataclass, field
from typing import ClassVar, NamedTuple

from item:base import Item
from item:meta import ItemType
from lib:helpers import id_to_number
from lib:const import ARMOR_SLOTS

item_type = Item | tuple[Item, int]

@dataclass
class Kit:
    name: str
    tagline: str
    icon: Item

    armor: dict[str, item_type] = field(default_factory=dict)
    hotbar: list[item_type] = field(default_factory=list)
    offhand: item_type | None = None

    # Store ref. to all items in one place 
    _all_items: list[ItemType] = field(init=False, default_factory=list)

    _all_kits: ClassVar[list["Kit"]] = []

    def __post_init__(self):
        self._all_kits.append(self)

        self._all_items.extend(self.armor.values())
        self._all_items.extend(self.hotbar)
        
        if self.offhand is not None:
            self._all_items.append(self.offhand)
        
        self.build()

    @property
    def id(self) -> str:
        return self.name.lower().replace(" ", "_")

    @property
    def numerical_id(self) -> int:
        return id_to_number(self.id)
    
    @property
    def loadout(self) -> str:
        return f"kit:loadout/{self.id}/apply"

    def apply_loadout(self):
        for slot, armor in self.armor.items():
            item replace entity @s f"armor.{slot}" with armor armor.count

        for index, item in enumerate(self.hotbar):
            if item is not None:
                item replace entity @s f"hotbar.{index}" with item item.count
        
        if self.offhand is not None:
            item replace entity @s weapon.offhand with self.offhand self.offhand.count

    def build(self):
        function self.loadout:
            self.apply_loadout()

            function ~/../as_mannequin:
                execute summon mannequin function ~/../configure_mannequin:
                    function self.loadout
                    if len(self.hotbar) > 1:
                        item replace entity @s weapon.mainhand with self.hotbar[0]
                    SELF.CustomName = self.name
